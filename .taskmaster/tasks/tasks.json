{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Go Project and Dependencies",
        "description": "Set up Go module and install required dependencies for the Myrcast weather report generator",
        "details": "Initialize a new Go module with 'go mod init myrcast'. Install required dependencies: github.com/pelletier/go-toml/v2 for TOML configuration parsing, github.com/go-resty/resty/v2 for HTTP client operations, and github.com/anthropics/anthropic-sdk-go for Claude API integration. Set up project structure with main.go, config/, api/, and internal/ directories. Configure Go 1.21+ as minimum version in go.mod.",
        "testStrategy": "Verify go.mod file is created correctly, all dependencies are installed without conflicts, and basic project structure is in place. Test with 'go mod tidy' and 'go build' to ensure clean compilation.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Go module and set minimum version",
            "description": "Create new Go module with proper naming and version constraints",
            "dependencies": [],
            "details": "Run 'go mod init myrcast' to initialize the Go module. Edit go.mod file to set minimum Go version to 1.21+ using 'go 1.21' directive. Verify module initialization is successful and go.mod file contains correct module name and version constraint.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Install required dependencies individually",
            "description": "Add each required dependency package using go get commands",
            "dependencies": [
              "1.1"
            ],
            "details": "Install dependencies one by one: 'go get github.com/pelletier/go-toml/v2' for TOML parsing, 'go get github.com/go-resty/resty/v2' for HTTP client, and 'go get github.com/anthropics/anthropic-sdk-go' for Claude API integration. Verify each dependency installs without conflicts and appears correctly in go.mod and go.sum files.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create project directory structure",
            "description": "Set up organized directory layout for the project components",
            "dependencies": [
              "1.2"
            ],
            "details": "Create project directories: main.go in root, config/ directory for configuration handling, api/ directory for external API integrations, and internal/ directory for internal packages. Ensure proper Go package organization following standard project layout conventions. Create placeholder files if needed to establish directory structure.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Verify build compilation and dependencies",
            "description": "Test that project compiles cleanly with all dependencies",
            "dependencies": [
              "1.3"
            ],
            "details": "Run 'go mod tidy' to clean up dependencies and ensure go.mod/go.sum are properly synchronized. Execute 'go build' to verify the project compiles without errors. Test 'go mod verify' to confirm dependency integrity. Create basic main.go with imports to verify all dependencies are accessible and working correctly.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement TOML Configuration Loading",
        "description": "Create configuration structure and loader for TOML file with all required settings",
        "details": "Define Go structs matching the TOML configuration structure: Config with nested structs for APIs, Weather, Output, Speech, and Prompt sections. Implement config loading function that accepts --config flag using standard library 'flag' package. Add validation for required fields (API keys, coordinates, directories). Handle default values and type conversion. Ensure proper error handling for missing or malformed configuration files.",
        "testStrategy": "Create test TOML files with valid and invalid configurations. Test configuration loading with missing fields, invalid types, and malformed TOML. Verify all configuration values are properly parsed and validated.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define configuration struct hierarchy",
            "description": "Create Go struct definitions for all configuration sections",
            "dependencies": [],
            "details": "Define the main Config struct with nested structs for APIs (OpenWeather, ElevenLabs), Weather (coordinates, units), Output (temp directory, Myriad import path), Speech (voice, speed, format), and Prompt (template settings). Include proper Go struct tags for TOML field mapping. Ensure all fields have appropriate data types (string, int, float64, bool) matching expected TOML values. Add validation struct tags where applicable.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement TOML file parsing",
            "description": "Create TOML configuration file parser using Go TOML library",
            "dependencies": [
              "2.1"
            ],
            "details": "Implement configuration loading function that reads TOML file using github.com/BurntSushi/toml or similar library. Parse the TOML content into the defined Config struct. Handle file reading errors, TOML syntax errors, and type conversion issues. Ensure proper unmarshaling of nested configuration sections into their respective struct fields.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add CLI flag handling",
            "description": "Implement command-line flag processing for config file path",
            "dependencies": [
              "2.2"
            ],
            "details": "Use Go's flag package to define --config flag for specifying TOML configuration file path. Set appropriate default config file location (e.g., ./config.toml). Implement flag parsing and pass the config file path to the TOML loader. Handle cases where config flag is not provided by using default path.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create validation functions",
            "description": "Implement configuration validation logic for required fields and formats",
            "dependencies": [
              "2.1"
            ],
            "details": "Create validation functions to check required API keys are present and non-empty. Validate coordinate ranges (latitude: -90 to 90, longitude: -180 to 180). Check directory paths exist and are writable. Validate voice names, speech speed ranges, and audio format specifications. Implement field-specific validation with descriptive error messages for each validation failure.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement error handling and defaults",
            "description": "Add comprehensive error handling and default value assignment",
            "dependencies": [
              "2.2",
              "2.3",
              "2.4"
            ],
            "details": "Implement error handling for missing configuration file, malformed TOML, and validation failures. Set sensible default values for optional configuration fields (speech speed, audio format, temp directory). Create detailed error messages that guide users to fix configuration issues. Implement graceful fallback behavior where appropriate and ensure the application exits cleanly on critical configuration errors.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Setup Structured Logging System",
        "description": "Implement logging infrastructure using log/slog with file output and appropriate log levels",
        "details": "Configure log/slog with custom handler that writes to both console and specified log file from configuration. Implement log levels (INFO, WARN, ERROR) with timestamps and structured fields. Create logging utility functions for common operations (API calls, file operations, errors). Ensure log file directory creation and proper file permissions on Windows. Add log rotation considerations for long-running operations.",
        "testStrategy": "Test logging to file and console simultaneously. Verify log levels work correctly and timestamps are properly formatted. Test file creation in various Windows directory scenarios and permission handling.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure slog with dual output handlers",
            "description": "Set up log/slog package with custom handler to write to both console and file simultaneously",
            "dependencies": [],
            "details": "Configure log/slog with a custom handler that outputs to both console (stdout/stderr) and a specified log file from configuration. Implement proper file handling with appropriate permissions for Windows systems. Set up the logging infrastructure foundation that other components will use.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement log levels and formatting",
            "description": "Configure log levels (INFO, WARN, ERROR) with timestamps and structured field formatting",
            "dependencies": [
              "3.1"
            ],
            "details": "Implement proper log level filtering and formatting with timestamps in a consistent format. Add structured field support for contextual logging (operation type, duration, etc.). Ensure log messages are properly formatted for both console readability and file parsing.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create logging utility functions",
            "description": "Build helper functions for common logging scenarios like API calls, file operations, and errors",
            "dependencies": [
              "3.2"
            ],
            "details": "Create utility functions for common logging patterns such as API request/response logging, file operation logging, and structured error logging. Include functions for logging operation start/completion with duration tracking. Provide consistent logging patterns that other modules can easily use.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Handle Windows file permissions and directory creation",
            "description": "Implement Windows-specific log directory creation and file permission handling",
            "dependencies": [
              "3.3"
            ],
            "details": "Ensure log file directory creation works properly on Windows with appropriate permissions. Handle Windows-specific path separators and permission scenarios. Implement log rotation considerations for long-running operations. Test and handle edge cases like restricted directories and long path names on Windows.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement OpenWeather API Integration",
        "description": "Create OpenWeather API client to fetch 5-day forecast and extract today's weather data",
        "details": "Implement HTTP client using net/http or go-resty to call OpenWeather 5-day forecast endpoint (https://api.openweathermap.org/data/2.5/forecast). Parse JSON response and extract today's weather data including temperature highs/lows, precipitation probability, wind conditions, and weather alerts. Handle metric/imperial unit conversion based on configuration. Implement proper error handling for network timeouts, API rate limits, and invalid responses. Store extracted data in variables for template substitution: temp_high, temp_low, current_temp, current_conditions, rain_chance, wind_conditions, weather_alerts, plus date/time variables.",
        "testStrategy": "Test with valid API keys and coordinates. Mock API responses for testing error scenarios (invalid key, network timeout, malformed JSON). Verify unit conversion between metric and imperial. Test data extraction accuracy against known forecast data.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "HTTP client setup and authentication",
            "description": "Set up HTTP client with OpenWeather API authentication and base configuration",
            "dependencies": [],
            "details": "Initialize HTTP client using net/http or go-resty package. Configure base URL for OpenWeather API (https://api.openweathermap.org/data/2.5/). Implement API key authentication by adding appid parameter to requests. Set appropriate request headers including User-Agent. Configure timeout settings for API requests to handle network latency and prevent hanging requests.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "API endpoint integration and request handling",
            "description": "Implement request construction and submission to OpenWeather 5-day forecast endpoint",
            "dependencies": [
              "4.1"
            ],
            "details": "Build request URL with required parameters: latitude, longitude, API key, and units (metric/imperial). Construct proper query parameters for 5-day forecast endpoint (/forecast). Implement request execution with proper HTTP method (GET). Add request context for cancellation and timeout handling. Include proper query parameter encoding for coordinates and API key.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "JSON response parsing and data structures",
            "description": "Define Go structs and implement JSON parsing for OpenWeather API responses",
            "dependencies": [
              "4.2"
            ],
            "details": "Define Go structs to match OpenWeather API response format including forecast list, weather details, main temperature data, wind information, and precipitation data. Implement JSON unmarshaling for API responses. Handle nested JSON structures for weather conditions, temperature data, and forecast timestamps. Add proper struct tags for JSON field mapping.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Weather data extraction and filtering",
            "description": "Extract and filter today's weather data from 5-day forecast response",
            "dependencies": [
              "4.3"
            ],
            "details": "Parse forecast timestamps to identify today's weather entries from 5-day forecast data. Extract temperature highs and lows for the current day. Retrieve precipitation probability, wind speed/direction, and weather condition descriptions. Filter forecast entries by date to get only today's data points. Calculate daily aggregates from multiple forecast points throughout the day.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Unit conversion logic",
            "description": "Implement temperature and measurement unit conversion between metric and imperial systems",
            "dependencies": [
              "4.4"
            ],
            "details": "Implement conversion functions between Celsius/Fahrenheit for temperature data. Convert wind speed between m/s and mph based on configuration settings. Handle pressure unit conversion between hPa and inHg if needed. Add unit conversion logic that respects the configuration's preferred unit system. Ensure converted values maintain appropriate precision and formatting.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Error handling and rate limiting",
            "description": "Implement comprehensive error handling, API rate limiting, and retry logic",
            "dependencies": [
              "4.5"
            ],
            "details": "Add error handling for HTTP request failures, network timeouts, and connection issues. Implement specific error handling for OpenWeather API error responses (invalid API key, location not found, rate limit exceeded). Add retry logic with exponential backoff for transient failures. Implement rate limiting to respect OpenWeather API limits. Handle malformed JSON responses and missing data fields gracefully with appropriate error messages.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Anthropic Claude API Integration",
        "description": "Create Claude API client to generate weather report scripts from forecast data",
        "details": "Integrate anthropic-sdk-go to send structured weather data and custom prompt to Claude API. Implement template variable substitution in the weather_prompt configuration using extracted weather data. Configure API client with proper authentication, timeout handling, and retry logic for rate limits. Format weather data as structured context for Claude to generate radio-appropriate weather report scripts. Handle API errors and validate response content for reasonable script length and format.",
        "testStrategy": "Test with valid Anthropic API key and various weather scenarios. Mock Claude responses for testing. Verify template variable substitution works correctly. Test error handling for API rate limits, invalid keys, and network issues. Validate generated scripts are appropriate length and content.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Setup Anthropic SDK and Authentication",
            "description": "Install and configure anthropic-sdk-go with proper API key authentication",
            "dependencies": [],
            "details": "Import anthropic-sdk-go package and create authenticated client instance. Load API key from TOML configuration and validate authentication. Set up proper client configuration with base URL and authentication headers. Handle API key validation and connection testing.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Template Variable Substitution System",
            "description": "Create system to substitute weather data variables in prompt templates",
            "dependencies": [
              "5.1"
            ],
            "details": "Parse weather_prompt template from configuration and identify variable placeholders. Implement substitution function that replaces template variables with actual weather data values. Support common template formats like {{variable}} or ${variable}. Handle missing variables gracefully with default values or error reporting.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Format Weather Data for Claude Context",
            "description": "Structure weather forecast data into Claude-compatible context format",
            "dependencies": [
              "5.2"
            ],
            "details": "Transform weather data from OpenWeather API into structured format suitable for Claude consumption. Include temperature highs/lows, precipitation probability, wind conditions, and weather alerts in clear, natural language context. Format data to optimize Claude's understanding for generating radio-appropriate weather scripts.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement API Request Handling with Retries",
            "description": "Create robust HTTP client for Claude API with timeout and retry logic",
            "dependencies": [
              "5.3"
            ],
            "details": "Implement HTTP client with proper timeout configuration and exponential backoff retry logic. Handle Claude API rate limits with appropriate delay between requests. Configure request headers, authentication, and JSON payload formatting. Add context cancellation support for graceful shutdowns.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Response Validation and Error Handling",
            "description": "Validate Claude API responses and handle various error scenarios",
            "dependencies": [
              "5.4"
            ],
            "details": "Parse JSON response from Claude API and validate script content for reasonable length and format. Handle HTTP error codes, authentication failures, and malformed responses. Implement specific error types for different API failure scenarios. Validate generated script content meets radio broadcast requirements and word count limits.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement ElevenLabs Text-to-Speech Integration",
        "description": "Create ElevenLabs API client to convert weather scripts to WAV audio files",
        "details": "Implement ElevenLabs API integration using their REST API for text-to-speech conversion. Configure voice selection, speech speed, and audio format (44.1kHz/16-bit WAV) based on configuration settings. Implement HTTP client to send generated script and receive audio file binary data. Handle voice availability validation and API rate limiting. Add proper error handling for authentication, voice not found, and audio generation failures. Implement audio file download and temporary storage.",
        "testStrategy": "Test with valid ElevenLabs API key and available voice names. Test various speech speeds and audio format requirements. Mock API responses for testing error scenarios. Verify generated WAV files meet specified format requirements (44.1kHz/16-bit).",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "ElevenLabs API Client Setup",
            "description": "Initialize HTTP client and authentication for ElevenLabs API",
            "dependencies": [],
            "details": "Create HTTP client using net/http or go-resty for ElevenLabs API communication. Implement authentication using API key from configuration. Set up base URL and required headers for API requests. Add timeout configuration and connection pooling for performance.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Voice Selection and Audio Format Configuration",
            "description": "Configure voice parameters and audio output settings",
            "dependencies": [
              "6.1"
            ],
            "details": "Implement voice selection logic based on configuration settings. Configure audio format parameters for 44.1kHz/16-bit WAV output. Set up speech speed and other voice synthesis parameters. Add validation for available voice names against ElevenLabs API.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Text-to-Speech Request Implementation",
            "description": "Build and send TTS requests to ElevenLabs API",
            "dependencies": [
              "6.2"
            ],
            "details": "Construct API request payload with text content, voice settings, and audio format specifications. Implement POST request to ElevenLabs TTS endpoint. Handle request serialization and proper content-type headers for JSON payload.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Binary Audio Data Handling and Download",
            "description": "Process and save WAV audio response from API",
            "dependencies": [
              "6.3"
            ],
            "details": "Handle binary audio data response from ElevenLabs API. Implement streaming download for large audio files. Save WAV data to temporary files with proper file handling and permissions. Verify audio format meets 44.1kHz/16-bit WAV specifications.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Error Handling for API Limits and Voice Validation",
            "description": "Implement comprehensive error handling for ElevenLabs API operations",
            "dependencies": [
              "6.4"
            ],
            "details": "Add error handling for API rate limits, authentication failures, and invalid voice selections. Implement retry logic with exponential backoff for transient failures. Add specific error types for different API response codes. Include proper error messages for voice availability and quota limit scenarios.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement File Operations and Directory Management",
        "description": "Create file handling system for temporary storage and Myriad import directory operations",
        "details": "Implement Windows-compatible file path handling for temp directory creation and file operations. Create temporary directory if it doesn't exist with proper Windows permissions. Save WAV files with media_id as filename (e.g., '12345.wav') in temp directory. Implement file copy operation to Myriad import directory with error handling for permission issues. Add cleanup functionality to remove temporary files after successful copy. Handle Windows-specific path separators and long path names.",
        "testStrategy": "Test directory creation with various Windows path scenarios including UNC paths, long paths, and permission-restricted directories. Test file copy operations between directories. Verify cleanup operations work correctly and handle file locking scenarios.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Windows Path Handling Utilities",
            "description": "Create utilities for Windows-compatible file path handling and manipulation",
            "dependencies": [],
            "details": "Implement Windows-specific path handling functions including proper path separator handling (backslash vs forward slash), UNC path support, and long path name handling (>260 characters). Create utility functions for path validation, normalization, and conversion. Handle Windows drive letters and network paths. Add support for both relative and absolute path operations with proper Windows path conventions.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Temporary Directory Creation with Permissions",
            "description": "Implement temporary directory creation with proper Windows permissions",
            "dependencies": [
              "7.1"
            ],
            "details": "Create function to generate and create temporary directories if they don't exist. Implement Windows-specific permission handling using appropriate Go libraries. Set proper read/write permissions for the current user while ensuring security. Handle cases where temp directory creation fails due to permissions or disk space. Add validation to ensure the created directory is writable and accessible.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "WAV File Saving with Media ID Naming",
            "description": "Implement WAV file saving functionality using media_id as filename",
            "dependencies": [
              "7.2"
            ],
            "details": "Create function to save WAV audio data to temporary directory using media_id as the filename (e.g., '12345.wav'). Implement proper file writing with error handling for disk space, permissions, and file locking issues. Add validation to ensure WAV file format compliance and proper file extension handling. Include file size validation and atomic write operations to prevent corruption.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "File Copy Operations to Myriad Directory",
            "description": "Implement file copy operations from temp to Myriad import directory",
            "dependencies": [
              "7.3"
            ],
            "details": "Create robust file copy function to move WAV files from temporary directory to Myriad import directory. Implement error handling for permission issues, network drive access, and file conflicts. Add progress tracking for large files and atomic copy operations. Handle scenarios where destination directory doesn't exist or is read-only. Include verification that copied files maintain integrity and proper file attributes.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Cleanup and Error Recovery Functions",
            "description": "Implement cleanup operations and error recovery mechanisms",
            "dependencies": [
              "7.4"
            ],
            "details": "Create comprehensive cleanup functions to remove temporary files after successful operations or on error conditions. Implement error recovery mechanisms that can handle partial failures and cleanup incomplete operations. Add proper handling of file locking scenarios and retry logic for cleanup operations. Include logging of cleanup operations and proper handling of cleanup failures. Ensure graceful cleanup even when files are in use or permissions have changed.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement Command Line Interface and Argument Parsing",
        "description": "Create CLI interface with flag parsing and help documentation",
        "details": "Implement command line argument parsing using standard library 'flag' package to accept --config parameter. Add version information display and basic help text. Validate configuration file path exists and is readable. Implement proper exit codes (0 for success, non-zero for failures). Add usage documentation and error messages for missing or invalid arguments. Handle Windows-specific path validation for configuration file parameter.",
        "testStrategy": "Test CLI with various argument combinations including missing config, invalid paths, and help flags. Verify exit codes are returned correctly for different scenarios. Test Windows path handling for configuration file parameter.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement CLI flag parsing and validation",
            "description": "Create command line argument parsing using Go's flag package to handle --config parameter and validate input",
            "dependencies": [],
            "details": "Use Go's standard library 'flag' package to implement command line argument parsing. Define --config flag to accept configuration file path parameter. Add input validation to ensure configuration file path is provided and points to an existing, readable file. Implement proper flag parsing with error handling for invalid or missing arguments.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement help documentation and version display",
            "description": "Add help text, usage documentation, and version information display functionality",
            "dependencies": [
              "8.1"
            ],
            "details": "Implement --help and --version flags using the flag package. Create comprehensive help text showing available command line options, usage examples, and parameter descriptions. Add version information display that shows application name and version number. Include usage documentation with examples of proper command invocation and configuration file requirements.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Windows path validation and exit code handling",
            "description": "Add Windows-specific path validation and proper exit code management for different scenarios",
            "dependencies": [
              "8.1"
            ],
            "details": "Implement Windows-compatible path validation for configuration file parameter including UNC paths and long path name support. Add proper exit code handling with 0 for success and appropriate non-zero codes for different failure types (missing config, invalid path, parsing errors). Ensure Windows path separators are handled correctly and provide meaningful error messages for path-related issues.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "Implement Error Handling and Recovery",
        "description": "Add comprehensive error handling, logging, and graceful failure recovery throughout the application",
        "details": "Implement comprehensive error handling for all API calls, file operations, and network requests. Add specific error types for different failure scenarios (API errors, file permissions, network timeouts). Implement retry logic with exponential backoff for transient API failures. Add detailed error logging with context information. Ensure proper cleanup of temporary files even on error conditions. Implement graceful shutdown handling and proper exit codes for different error types.",
        "testStrategy": "Test various error scenarios including network failures, API rate limits, file permission errors, and invalid configurations. Verify error messages are helpful and logged appropriately. Test retry mechanisms and cleanup operations during error conditions.",
        "priority": "high",
        "dependencies": [
          7,
          8
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Define custom error types for different scenarios",
            "description": "Create specific error types for API failures, file operations, network issues, and configuration problems",
            "dependencies": [],
            "details": "Define custom error types using Go's error interface for different failure scenarios: APIError for OpenWeather/ElevenLabs API failures, FileError for file system operations, NetworkError for connectivity issues, ConfigError for configuration validation failures, and ValidationError for input validation. Each error type should include contextual information like error codes, retry eligibility, and user-friendly messages. Implement error wrapping to preserve error chains.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement retry logic with exponential backoff",
            "description": "Add configurable retry mechanisms for transient API and network failures",
            "dependencies": [
              "9.1"
            ],
            "details": "Implement retry logic with exponential backoff for API calls and network operations. Create configurable retry parameters: max attempts, initial delay, backoff multiplier, and jitter. Add retry eligibility determination based on error types (retry for 429, 500-503 status codes, network timeouts). Implement circuit breaker pattern for repeated failures. Add retry context with cancellation support and progress logging.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add contextual error logging throughout application",
            "description": "Implement comprehensive logging with context information for all error scenarios",
            "dependencies": [
              "9.1"
            ],
            "details": "Add structured logging using Go's slog package with contextual information for all error scenarios. Include operation context (API endpoint, file path, configuration section), request/response details, timing information, and correlation IDs. Implement different log levels (ERROR, WARN, INFO, DEBUG) with appropriate filtering. Add log formatting for both console output and potential file logging. Include stack traces for debugging without exposing sensitive information.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create cleanup functions for error conditions",
            "description": "Implement resource cleanup and rollback mechanisms for error scenarios",
            "dependencies": [
              "9.1"
            ],
            "details": "Create cleanup functions to handle resource deallocation during error conditions. Implement defer-based cleanup for temporary files, HTTP connections, and file handles. Create rollback mechanisms for partial operations (incomplete file copies, failed directory creation). Add cleanup registry to track resources requiring cleanup across goroutines. Implement timeout-based cleanup to prevent resource leaks during hung operations.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement graceful shutdown handling",
            "description": "Add signal handling and graceful shutdown with proper exit codes",
            "dependencies": [
              "9.2",
              "9.4"
            ],
            "details": "Implement signal handling for SIGINT, SIGTERM on Windows using os/signal package. Create graceful shutdown sequence: stop accepting new work, complete in-flight operations with timeout, cleanup resources, and exit with appropriate codes. Define exit codes: 0 for success, 1 for general errors, 2 for configuration errors, 3 for API errors, 4 for file operation errors. Implement shutdown timeout to prevent hanging during cleanup.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Add comprehensive error testing and validation",
            "description": "Create test suite covering all error scenarios and recovery mechanisms",
            "dependencies": [
              "9.3",
              "9.5"
            ],
            "details": "Create comprehensive test suite for error handling scenarios using Go's testing package and testify for assertions. Mock external dependencies (APIs, file system) to simulate various error conditions. Test retry logic with different failure patterns, cleanup operations during errors, graceful shutdown behavior, and error message formatting. Add integration tests for end-to-end error scenarios. Implement error injection capabilities for testing production error handling.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "Build Production Executable and Deployment Preparation",
        "description": "Create Windows executable build process and prepare for production deployment",
        "details": "Configure Go build process for Windows executable with proper GOOS and GOARCH settings. Implement build flags for version information and optimization. Create build scripts or Makefile for consistent builds. Add Windows-specific considerations like embedding manifest for proper execution privileges. Test executable on target Windows systems. Prepare documentation for installation and configuration. Ensure single binary has no external dependencies except configuration file.",
        "testStrategy": "Test built executable on clean Windows systems without Go installed. Verify all functionality works in production-like environment. Test as scheduled task in Windows Task Scheduler. Validate performance and memory usage under normal operation.",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Go build process and cross-compilation",
            "description": "Set up Go build configuration for Windows executable with proper GOOS/GOARCH settings and optimization flags",
            "dependencies": [],
            "details": "Configure Go build process for Windows target using GOOS=windows and GOARCH=amd64. Set build flags for optimization (-ldflags '-s -w' for size reduction). Configure version embedding using build-time variables. Set up proper module configuration and ensure all dependencies are properly vendored. Configure CGO settings if needed for any dependencies.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create build scripts and version embedding",
            "description": "Develop build scripts/Makefile and implement version information embedding in the executable",
            "dependencies": [
              "10.1"
            ],
            "details": "Create build script (Makefile or shell script) that automates the build process with proper flags and version injection. Implement version embedding using -ldflags '-X main.version={{.Version}} -X main.buildTime={{.BuildTime}}'. Add git commit hash and build timestamp to version info. Create separate scripts for development and production builds. Ensure consistent builds across different environments.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Test executable on target Windows systems",
            "description": "Validate the built executable works correctly on clean Windows systems without Go runtime",
            "dependencies": [
              "10.2"
            ],
            "details": "Test the built executable on Windows systems without Go development environment installed. Verify all functionality works including API calls, file operations, and audio generation. Test as Windows scheduled task to ensure proper execution context. Validate memory usage and performance under normal operation. Test with different Windows versions if possible. Verify configuration file loading and error handling work properly.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Prepare deployment documentation and installation guides",
            "description": "Create comprehensive documentation for installation, configuration, and deployment of the production executable",
            "dependencies": [
              "10.3"
            ],
            "details": "Create installation guide covering executable placement, configuration file setup, and initial testing. Document Windows Task Scheduler setup for automated execution. Prepare troubleshooting guide for common issues and error messages. Create configuration examples and explain all available settings. Document system requirements and any Windows-specific considerations. Include upgrade procedures and backup recommendations.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-25T23:05:31.403Z",
      "updated": "2025-07-26T00:05:31.271Z",
      "description": "Tasks for master context"
    }
  }
}